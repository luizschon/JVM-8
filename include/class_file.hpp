#ifndef _CLASS_FILE_HPP
#define _CLASS_FILE_HPP

#include "types_definition.hpp"
#include "constant_pool_info.hpp"

using namespace std;

// Class Access Flags
#define ACC_PUBLIC     0x0001 // Declared public; may be accessed from outside its package
#define ACC_FINAL      0x0010 // Declared final; no subclasses allowed.
#define ACC_SUPER      0x0020 // Treat superclass methods specially when invoked by the invokespecial instruction.
#define ACC_INTERFACE  0x0200 // Is an interface, not a class.
#define ACC_ABSTRACT   0x0400 // Declared abstract; must not be instantiated
#define ACC_SYNTHETIC  0x1000 // Declared synthetic; not present in the source code.
#define ACC_ANNOTATION 0x2000 // Declared as an annotation type.
#define ACC_ENUM       0x4000 // Declared as an enum type.

// Field Access and property flags
#define ACC_PUBLIC    0x0001 // Declared public; may be accessed from outside its package.
#define ACC_PRIVATE   0x0002 // Declared private; usable only within the defining class.
#define ACC_PROTECTED 0x0004 // Declared protected; may be accessed within Subclasses.
#define ACC_STATIC    0x0008 // Declared static.
#define ACC_FINAL     0x0010 // Declared final; never directly assigned to after Object construction.
#define ACC_VOLATILE  0x0040 // Declared volatile; cannot be cached.
#define ACC_TRANSIENT 0x0080 // Declared transient; not written or read by a persistent object manager.
#define ACC_SYNTHETIC 0x1000 // Declared synthetic; not present in the source code.
#define ACC_ENUM      0x4000 // Declared as an element of an enum.

// Method Access and property flags
#define ACC_PUBLIC       0x0001 // Declared public; may be accessed from outside its package.
#define ACC_PRIVATE      0x0002 // Declared private; accessible only within the defining class.
#define ACC_PROTECTED    0x0004 // Declared protected; may be accessed withinsubclasses.
#define ACC_STATIC       0x0008 // Declared static.
#define ACC_FINAL        0x0010 // Declared final; must not be overridden.
#define ACC_SYNCHRONIZED 0x0020 // Declared synchronized; invocation is wrapped by a monitor use.
#define ACC_BRIDGE       0x0040 // A bridge method, generated by the compiler.
#define ACC_VARARGS      0x0080 // Declared with variable number of arguments.
#define ACC_NATIVE       0x0100 // Declared native; implemented in a language other than Java.
#define ACC_ABSTRACT     0x0400 // Declared abstract; no implementation is provided.
#define ACC_STRICT       0x0800 // Declared strictfp; floating-point mode is FP-strict.
#define ACC_SYNTHETIC    0x1000 // Declared synthetic; not present in the source code.

// Attributes Info Structure
typedef struct attr_info {
    attr_info(ifstream &file);
    u2 attr_name_idx;
    u4 attr_length;
    vector<u1> info;
} attr_info;

// Field Info Structure
typedef struct field_info {
    field_info(ifstream &file);
    u2 access_flags;
    u2 name_idx;
    u2 descriptor_idx;
    u2 attr_count;
    vector<attr_info> attr;
} field_info;

// Method Info Structure
typedef struct method_info {
    method_info(ifstream &file);
    u2 access_flags;
    u2 name_idx;
    u2 descriptor_idx;
    u2 attr_count;
    vector<attr_info> attr;
} method_info;

// constant_pool = [...] (14 tipos)
// 14 vectors de 1 tipo cada
// double -> [ ... ]
// long -> [ ... ]
// ...
// invokedynamic -> [ ... ]

typedef struct class_file {
    u4 magic;
    u2 minor_version;
    u2 major_version;
    u2 constant_pool_count;
    vector<CONSTANT_utf8_info> utf8_pool;
    vector<CONSTANT_integer_info> integer_pool;
    vector<CONSTANT_long_info> long_pool;
    vector<CONSTANT_float_info> float_pool;
    vector<CONSTANT_double_info> double_pool;
    vector<CONSTANT_class_info> class_pool;
    vector<CONSTANT_string_info> string_pool;
    vector<CONSTANT_fieldref_info> fieldref_pool;
    vector<CONSTANT_methodref_info> methodref_pool;
    vector<CONSTANT_interface_methodref_info> interface_methodref_pool;
    vector<CONSTANT_name_and_type_info> name_and_type_pool;
    vector<CONSTANT_method_handle_info> method_handle_pool;
    vector<CONSTANT_method_type_info> method_type_pool;
    vector<CONSTANT_invoke_dynamic_info> invoke_dynamic_pool;
    u2 access_flag;
    u2 this_class;
    u2 super_class;
    u2 interfaces_count;
    vector<u2> interfaces;
    u2 fields_count;
    vector<field_info> fields;
    u2 methods_count;
    vector<method_info> methods;
    u2 attributes_count;
    vector<attr_info> attributes;
} class_file;

// finish docs
void get_metadata(class_file &class_f, ifstream &file);

// finish docs
void get_constant_pool(class_file &class_f, ifstream &file);

/**
 * Reads a byte from current position in a given file.
 * @param file a binary file 
 * @return one byte from file
 */
u1 read_u1(ifstream &file);

/**
 * Reads two bytes from current position in a given file.
 * @param file a binary file
 * @return two bytes from file
 */
u2 read_u2(ifstream &file);

/**
 * Reads four bytes from current position in a given file.
 * @param file a binary file
 * @return four bytes from file
 */
u4 read_u4(ifstream &file);

/**
 * Reads eight bytes from current position in a given file.
 * @param file a binary file
 * @return eight bytes from file
 */
u8 read_u8(ifstream &file);

// finish docs
ifstream open_file(int argc, char** argv);

// finish docs
void get_metadata(class_file &class_f, ifstream &file);

// finish docs
void get_class_data(class_file &class_f, ifstream &file);

// finish docs
void get_interfaces(class_file &class_f, ifstream &file);

// finish docs
void get_fields(class_file &class_f, ifstream &file);

// finish docs
void get_methods(class_file &class_f, ifstream &file);

// finish docs
void get_attributes(class_file &class_f, ifstream &file);

#endif // _CLASS_FILE_HPP